PROPOSAL_MESSAGE = "Proposal"
VOTE_MESSAGE = "vote_message"
TIMEOUT_MESSAGE = "timeout_message"

class NetworkPlayground(process):

    def setup(config, id_to_validator_map, validator_to_id_map):
        # output("Network playground setup completed", level=logging.DEBUG)
        # self.currentRound = "-1"
        pass

    def run():
        pass

    # def receieve(msg = (msgType, msg), from_= node):
        # # Received message is either a proposal message or timeout message
        # if msgType == PROPOSAL_MESSAGE or msgType == TIMEOUT_MESSAGE:
        #    # Get current round if message is proposal message 
        #     if msgType == PROPOSAL_MESSAGE:
        #         self.currentRound = str(msg.block.round)
        #     # Get the current round if message is timeout message
        #     else:
        #         self.currentRound =  str(msg.timeout_info.round)
            
        #     for partition in self.round_partitions_map[self.currentRound]["Partition"]:
        #         if node in partition:
        #             for replica in partition:
                        
        #                 if replica == node:
        #                     pass
                        
        #                 elif self.exclustion_map[current_round][node] == "*":
        #                     if self.exclusion_map[current_round][node]["messageType"] == msgType:
        #                         pass
        #                     elif self.exclusion_map[current_round][node]["messageType"] == "*":
        #                         pass
                        
        #                 elif self.exclusion_map[current_round][node] == replica:
        #                     if self.exclusion_map[current_round][node]["messageType"] == msgType:
        #                         pass
        #                     elif self.exclusion_map[current_round][node]["messageType"] == "*":
        #                         pass     
                        
        #                 send((msgType, msg), to = self.replicas[replica])
        
        # # Received message is a vote message to be sent
        # else:
        #     round = msg.vote_info.round
        #     for partition in self.round_partitions_map[self.round]["Partition"]:
        #         if node in partition:
        #             for leader in self.round_partitions_map[self.round]["Leader"]:
        #                 if leader in partition:
        #                     if self.exclustion_map[round][node] == "*":
        #                         if self.exclusion_map[round][node]["messageType"] == msgType:
        #                             pass
        #                         elif self.exclusion_map[round][node]["messageType"] == "*":
        #                             pass
        
        #                     elif self.exclusion_map[round][node] == leader:
        #                         if self.exclusion_map[round][node]["messageType"] == msgType:
        #                             pass
        #                         elif self.exclusion_map[round][node]["messageType"] == "*":
        #                             pass  
                        
        #                 send((msgType, msg), to = self.replicas[leader])
        pass
