PROPOSAL_MESSAGE = "Proposal"
VOTE_MESSAGE = "vote_message"
TIMEOUT_MESSAGE = "timeout_message"

class NetworkPlayground(process):

    def setup(config, id_to_validator_map, validator_to_id_map):
        print(id_to_validator_map)
        print(validator_to_id_map)
        self.isdone = False
        self.exclusion_map = self.config["exclusion"]
        pass

    def run():
        print("Playground Started")
        await(self.isdone == True)
        output("exit playground")

    def get_partition(round, node):
        result = []
        if str(self.round) in self.config['round_partitions']:
            for partition in self.config['round_partitions'][str(self.round)]["Partition"]:
                if node in partition:
                    # print(partition)
                    for n in partition:
                        if n not in result:
                            result.append(n)
            return result

    def get_nodes_list(partition):
        lst = []
        for node in partition:
            lst.append(self.id_to_validator_map[node])
        return lst
    
    def fetch_next_leader(round):
        next_round = round + 1
        if str(next_round) in self.config['round_partitions']:
            next_leader = self.config['round_partitions'][str(next_round)]["Leader"]
            return next_leader
        else:
            return []

    def send_to_validators(msg_type, msg, src_node, dest_list):
        # send((msgType, msg, node), to = validator_to_id_map.keys())
        print("Sending ", msg_type, " from ", src_node, " to", dest_list)
        send((msg_type, msg, src_node), to = dest_list)
        
    def receive(msg=('Done',), from_=p):
        self.isdone = True

    def receive(msg=('Proposal', p_msg), from_=node):
        current_round = str(p_msg.block.round)
        node_id = self.validator_to_id_map[node]
        current_partition = get_partition(current_round, node_id)
        print("Proposal Message receive from ", node_id, " : Which is in the partition ", current_partition)
        nodes_list = get_nodes_list(current_partition)
        if config['exclusion_flag'] == 1:
            for replica in current_partition:      
                if replica == node_id:
                    continue
                elif current_round in self.exclusion_map and node_id in self.exclusion_map[current_round]:

                    if self.exclusion_map[current_round][node_id] == "*" :
                        if "messageType" in self.exclusion_map[current_round][node_id]["*"]:
                            if self.exclusion_map[current_round][node_id]["*"]["messageType"] == PROPOSAL_MESSAGE:
                                continue
                            elif self.exclusion_map[current_round][node_id]["*"]["messageType"] == "*":
                                continue
                    
                    if replica in self.exclusion_map[current_round][node_id]:
                        if "messageType" in self.exclusion_map[current_round][node_id][replica]:
                            if self.exclusion_map[current_round][node_id][replica]["messageType"] == PROPOSAL_MESSAGE:
                                continue
                            elif self.exclusion_map[current_round][node_id][replica]["messageType"] == "*":
                                continue
                    
                    print("sending msg to ", p_msg, " to ", replica,  " from ", node_id, "...", self.id_to_validator_map[node_id], "round", current_round)
                    send(('Proposal', p_msg, node), to = self.id_to_validator_map[replica])
        else:
            send_to_validators('Proposal', p_msg, node, nodes_list)
        

    def receive(msg=('Timeout', t_msg), from_=node):
        current_round =  str(t_msg.tmo_info.round)
        node_id = self.validator_to_id_map[node]
        current_partition = get_partition(current_round, node_id)
        print("Timeout Message receive from ", node_id, " : Which is in the partition ", current_partition, " Round : ", current_round)
        nodes_list = get_nodes_list(current_partition)
        if config["exclusion_flag"] == 1:
            for replica in current_partition:      
                if replica == node_id:
                    continue
                elif current_round in self.exclusion_map and node_id in self.exclusion_map[current_round]:
                    if self.exclusion_map[current_round][node_id] == "*":
                        if "messageType" in self.exclusion_map[current_round][node_id]["*"]:
                            if self.exclusion_map[current_round][node_id]["*"]["messageType"] == TIMEOUT_MESSAGE:
                                continue
                            elif self.exclusion_map[current_round][node_id]["*"]["messageType"] == "*":
                                continue
                    if replica in self.exclusion_map[current_round][node_id]:
                        if "messageType" in self.exclusion_map[current_round][node_id][replica]:
                            if self.exclusion_map[current_round][node_id][replica]["messageType"] == TIMEOUT_MESSAGE:
                                continue
                            elif self.exclusion_map[current_round][node_id][replica]["messageType"] == "*":
                                continue
                
                    print("sending msg to ", t_msg, " to ", replica,  " from ", node_id, "...", self.id_to_validator_map[node_id], "round", current_round) 
                    send((TIMEOUT_MESSAGE, t_msg, node), to = self.id_to_validator_map[replica])
        else:
            send_to_validators('Timeout', t_msg, node, nodes_list)


    def receive(msg=('Vote', v_msg), from_=node):
        current_round = v_msg.vote_info.round
        node_id = self.validator_to_id_map[node]
        current_partition = get_partition(current_round, node_id)
        next_leader_list = fetch_next_leader(current_round)
        for nxt_l in next_leader_list:
            if nxt_l in current_partition:
                nxt_l_validator = self.id_to_validator_map[nxt_l]
                if config["exclusion_flag"] == 1:
                    if nxt_l == node_id:
                        continue
                    elif current_round in self.exclusion_map and node_id in self.exclusion_map[current_round]:
                        if self.exclusion_map[current_round][node_id] == "*":
                            if "messageType" in self.exclusion_map[current_round][node_id]["*"]:
                                if self.exclusion_map[current_round][node_id]["*"]["messageType"] == VOTE_MESSAGE:
                                    continue
                                elif self.exclusion_map[current_round][node_id]["*"]["messageType"] == "*":
                                    continue
                        elif nxt_l in self.exclusion_map[current_round][node_id]:
                            if "messageType" in self.exclusion_map[current_round][node_id][nxt_l]:
                                if self.exclusion_map[current_round][node_id][nxt_l]["messageType"] == VOTE_MESSAGE:
                                    continue
                                elif self.exclusion_map[current_round][node_id][nxt_l]["messageType"] == "*":
                                    continue

                    print("sending msg to ", v_msg, " to ", nxt_l,  " from ", node_id, "...", self.id_to_validator_map[node_id], "round", current_round)
                    send((VOTE_MESSAGE, v_msg, node), to = self.id_to_validator_map[nxt_l])
                else:
                    send_to_validators('Vote', v_msg, node, [nxt_l_validator])

    def receive(msg=('Sync_Request', currentRound), from_=node):
        node_id = self.validator_to_id_map[node]
        print("Got Sync_Request Message from ", node_id, " for the round ", currentRound)
        current_partition = get_partition(currentRound, node_id)
        nodes_list = get_nodes_list(current_partition)
        send_to_validators('Sync_Request', currentRound, node, nodes_list)


    def receive(msg=('Sync_Reply', message, currentRound), from_=node):
        node_id = self.validator_to_id_map[node]
        print("Got Sync_Reply Message from ", node_id, " for the round ", currentRound)
        current_partition = get_partition(currentRound, node_id)
        nodes_list = get_nodes_list(current_partition)
        send_to_validators('Sync_Reply', message, node, nodes_list)